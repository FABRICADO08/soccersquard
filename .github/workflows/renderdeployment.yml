name: Manual Deploy Mendix App to Render

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      mendix_version:
        description: 'Mendix runtime version'
        required: false
        default: 'latest'
        type: string

env:
  MENDIX_USERNAME: ${{ secrets.MENDIX_USERNAME }}
  MENDIX_APIKEY: ${{ secrets.MENDIX_APIKEY }}
  RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
  RENDER_SERVICE_ID: ${{ secrets.RENDER_SERVICE_ID }}

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Check Docker Availability
        run: |
          if ! [ -x "$(command -v docker)" ]; then
            echo "Error: Docker is not installed or not available in the PATH."
            exit 1
          fi

      - name: Checkout repository
        uses: actions/checkout@v4

      # Skipping Mendix Docker buildpack due to image unavailability

      - name: Assume Mendix project is pre-built
        run: echo "Assuming Mendix project is pre-built in ./dist"

      - name: Create deployment package
        run: |
          echo "Creating deployment package..."
          tar -czf mendix-app.tar.gz -C ./dist .

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        run: |
          cat > Dockerfile <<'EOF'
          FROM mendix/runtime:${{ github.event.inputs.mendix_version || 'latest' }}

          # Copy the Mendix application
          COPY dist /app

          # Set environment variables
          ENV MENDIX_RUNTIME_PATH=/app
          ENV PORT=8080

          # Expose port
          EXPOSE 8080

          # Health check
          HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
            CMD curl -f http://localhost:8080/health || exit 1

          # Start the application
          CMD ["start-app"]
          EOF

          docker build -t mendix-app:${{ github.sha }} .

      - name: Deploy to Render
        run: |
          echo "Deploying to Render..."

          DEPLOYMENT_PAYLOAD=$(cat <<EOF
          {
            "serviceId": "$RENDER_SERVICE_ID",
            "clearCache": "clear",
            "imageUrl": "mendix-app:${{ github.sha }}"
          }
          EOF
          )

          DEPLOY_RESPONSE=$(curl -X POST \
            -H "Authorization: Bearer $RENDER_API_KEY" \
            -H "Content-Type: application/json" \
            -d "$DEPLOYMENT_PAYLOAD" \
            https://api.render.com/v1/services/$RENDER_SERVICE_ID/deploys)

          echo "Deployment response: $DEPLOY_RESPONSE"

          DEPLOY_ID=$(echo $DEPLOY_RESPONSE | jq -r '.deploy.id')
          echo "Deployment ID: $DEPLOY_ID"

          echo "Waiting for deployment to complete..."
          while true; do
            STATUS=$(curl -s -H "Authorization: Bearer $RENDER_API_KEY" \
              https://api.render.com/v1/services/$RENDER_SERVICE_ID/deploys/$DEPLOY_ID | \
              jq -r '.deploy.status')

            echo "Deployment status: $STATUS"

            if [ "$STATUS" = "live" ]; then
              echo "‚úÖ Deployment successful!"
              break
            elif [ "$STATUS" = "build_failed" ] || [ "$STATUS" = "update_failed" ]; then
              echo "‚ùå Deployment failed with status: $STATUS"
              exit 1
            fi

            sleep 30
          done

      - name: Run post-deployment tests
        run: |
          echo "Running post-deployment health checks..."

          SERVICE_URL=$(curl -s -H "Authorization: Bearer $RENDER_API_KEY" \
            https://api.render.com/v1/services/$RENDER_SERVICE_ID | \
            jq -r '.service.serviceDetails.url')

          echo "Service URL: $SERVICE_URL"

          for i in {1..10}; do
            if curl -f "$SERVICE_URL/health" > /dev/null 2>&1; then
              echo "‚úÖ Health check passed"
              break
            else
              echo "‚è≥ Health check failed, retrying in 30s... (attempt $i/10)"
              sleep 30
            fi
          done

      - name: Update deployment status
        if: always()
        run: |
          if [ "${{ job.status }}" = "success" ]; then
            echo "üéâ Deployment completed successfully!"
            echo "Environment: ${{ github.event.inputs.environment }}"
            echo "Commit: ${{ github.sha }}"
            echo "Triggered by: ${{ github.actor }}"
          else
            echo "‚ùå Deployment failed"
            echo "Please check the logs above for more details"

      - name: Notify on failure (only if PR/issue context)
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            if (context.issue && context.issue.number) {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `‚ùå Deployment to Render failed for environment: ${{ github.event.inputs.environment }}

                **Details:**
                - Commit: ${{ github.sha }}
                - Triggered by: ${{ github.actor }}
                - Workflow: ${{ github.workflow }}

                Please check the [workflow logs](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) for more details.`
              });
            } else {
              console.log('No issue or PR context: skipping comment.');
            }

  cleanup:
    runs-on: ubuntu-latest
    needs: deploy
    if: always()

    steps:
      - name: Cleanup temporary Docker images
        run: |
          echo "Cleaning up temporary images..."
          docker rmi mendix-app:${{ github.sha }} || true
          docker system prune -f
          echo "Cleanup completed"
